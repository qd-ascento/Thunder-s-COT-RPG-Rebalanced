LinkLuaModifier("modifier_sai_invulnerability", "heroes/hero_sai/invulnerability.lua", LUA_MODIFIER_MOTION_NONE)

sai_invulnerability = class({})

if IsServer() then
	function sai_invulnerability:OnToggle()
		local caster = self:GetCaster()
		if self:GetToggleState() then
			caster:AddNewModifier(caster, self, "modifier_sai_invulnerability", nil)
		else
			caster:RemoveModifierByName("modifier_sai_invulnerability")
		end
	end
end


modifier_sai_invulnerability = class({
	IsHidden = function() return true end,
})

function modifier_sai_invulnerability:DeclareFunctions()
	return {
		MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT,
		MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE,
		MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE,
		MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE
	}
end

function modifier_sai_invulnerability:GetModifierAttackSpeedBonus_Constant()
	return self:GetAbility():GetSpecialValueFor("attack_speed_reduction")
end

function modifier_sai_invulnerability:GetModifierMoveSpeedBonus_Percentage()
	return self:GetAbility():GetSpecialValueFor("movement_speed_reduction_pct")
end

function modifier_sai_invulnerability:GetModifierTotalDamageOutgoing_Percentage()
	return self:GetAbility():GetSpecialValueFor("outgoing_damage_reduction_pct")
end

function modifier_sai_invulnerability:GetModifierIncomingDamage_Percentage()
	return self:GetAbility():GetSpecialValueFor("incoming_damage_reduction_pct")
end

if IsServer() then
	function modifier_sai_invulnerability:OnCreated()
		local parent = self:GetParent()
		self:GetAbility():AutoStartCooldown()
		self:AddParticle(ParticleManager:CreateParticle("particles/arena/units/heroes/hero_sai/invulnerability.vpcf", PATTACH_POINT_FOLLOW, parent, nil, 5), false, false, 10, false, false)
		self:StartIntervalThink(self:GetAbility():GetSpecialValueFor("think_interval"))
		self:OnIntervalThink()
	end

	function modifier_sai_invulnerability:OnIntervalThink()
		local ability = self:GetAbility()
		local parent = self:GetParent()
		local manaPerTick = (ability:GetSpecialValueFor("mana_per_second") + (parent:GetMaxMana() * 0.01 * ability:GetSpecialValueFor("mana_per_second_pct"))) * ability:GetSpecialValueFor("think_interval")
		if parent:GetMana() >= manaPerTick and ability:GetToggleState() then
			parent:SpendMana(manaPerTick, ability)
		else
			ability:ToggleAbility()
		end
	end
end
